#include<bits/stdc++.h>
using namespace std;
// swapping two number
void swap(int *a,int *b)
{
    int temp=*a;
   *a=*b;
    *b=temp;
}
// insert element at given index in array
void insert(int a[],int n,int index,int x)
{
    for(int i=n;i>index;i--)
        a[i]=a[i-1];
    a[index]=x;
    n++;
}
// Delete element of a prticular index;
void deleteA(int a[],int n,int index)
{
    
    for(int i=index;i<n;i++)
       a[i]=a[i+1];
    n--;
}
// binary search on array
int biSearch(int a[],int n,int key)
{
    int l=0;
    int h=n-1;

    while(l<=h)
    {
        int mid=(l+h)/2;
        if(key==a[mid])
            return mid;
        else if(key>a[mid])
            l=mid+1;
        else
            h=mid-1;
    }
    return -1;
}
// Dispaly all elements of an array
void display(int a[],int n)
{
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
}
// Reverse array with help of second array
void revByCopy(int a[],int n)
{
    int b[n]={0};
    for(int i=n-1,j=0;i>=0,j<n;i--,j++)
        b[j]=a[i];
        
    for(int i=0;i<n;i++)
        a[i]=b[i];
}
// reverse array by swapping elements
void revBySwap(int a[],int n)
{
    for(int i=0,j=n-1;i<j;i++,j--)
    {
        swap(a[i],a[j]);
    }
}
// Checking array is sorted or not
int sortedA(int a[],int n)
{
    for(int i=0;i<n;i++)
    {
        if(a[i]>a[i+1])
            return 0;
    }
    return 1;
}
// Merging of two array
int mergeArr(int a[],int n, int b[], int m)
{
    int c[m+n]={0};
    int i,j,k;
    i=j=k=0;
    while(i<n && j<m)
    {
        if(a[i]<=b[j])
            c[k++]=a[i++];
        else
            c[k++]=b[j++];
    }
    for(;i<n;i++)
        c[k++]=a[i];
    for(;j<m;j++)
        c[k++]=b[j];
    for(int i=0;i<m+n;i++)
        cout<<c[i]<<" ";
    cout<<endl;
    return 0;
}
// finding missing elements from a sorted array
int missingEarr(int a[],int n)
{
    int sum=0;
    int aSum=n*(n+1)/2;
    for(int i=0;i<n-1;i++)
        sum=sum+a[i];
        
    return aSum-sum;
}
// finding missing elements from a unsorted array
int missingEUarr(int a[],int n)
{
    int l=a[0];
    // int h=a[n-1];
    // n=h-l;
    // cout<<n;
    int diff=l-0;
    for(int i=0;i<n;i++)
    {
        if(a[i]-i!=diff)
        {
            return i+diff;
            break;
        }
    }
    return 0;
}
// find missing multiple elements from unsorted array
void missingES(int a[],int n)
{
    int l=a[0];
    int h=a[n-1];
    // n=h-l;
    // cout<<n;
    int diff=a[0]-0;
    for(int i=0;i<n;i++)
    {
        if(a[i]-i!=diff)
        {
            while(diff<a[i]-i)
            {
                cout<<i+diff<<" ";
                diff++;
                
            }
        }
    }
}
// Find max elements in array
int maxE(int a[],int n)
{
    int max=a[0];
    for(int i=0;i<n;i++)
    {
        if(a[i]>max)
            max=a[i];
    }
    return max;
}
// Find min elements from an array
int minE(int a[],int n)
{
    int min=a[0];
    for(int i=0;i<n;i++)
    {
        if(a[i]<min)
            min=a[i];
    }
    return min;
}
// method second using hashing
void missingHash(int a[],int n)
{
    int l=minE(a,n);
    int h=maxE(a,n);
    int H[h]={0};
    for(int i=0;i<n;i++)
    {
        H[a[i]]=1;
    }
    for(int i=l;i<=h;i++)
    {
        if(H[i]==0)
            cout<<i<<" ";
    }
    
}
// Find duplicates in array
void duplicatesE(int a[],int n)
{
    int lastDuplicates=-1;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(a[i]==a[j] && a[j]!=lastDuplicates)
            {
                lastDuplicates=a[i];
                cout<<a[i]<<" ";
            }
        }
    }
}
// Find duplicates second method using hashing
void duplicatesEH(int a[],int n)
{
    int l=minE(a,n);
    int h=maxE(a,n);
    int H[h]={0};
    for(int i=0;i<n;i++)
    {
        H[a[i]]++;
    }
    for(int i=l;i<=h;i++)
    {
        if(H[i]>1)
            cout<<i<<" ";
    }
}
// find pair of elements with sum
void sumPair(int a[],int n, int sum)
{
    int lasti=-1;
    int lastj=-1;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(a[i]+a[j]==sum && lasti!=a[i])
            {
                cout<<"("<<a[i]<<","<<a[j]<<") ";
                lasti=a[i];
                lastj=a[j];
            }
        }
    }
}

int main()
{
    int a[]={1,2,3,4,6};
    int b[]={3,5,6,7,8};
    // insert(a,7,5,9);
    // deleteA(a,7,5);
    // cout<<biSearch(a,7,7)<<endl;
    // revByCopy(a,7);
    // revBySwap(a,7);
    // cout<<sortedA(a,7)<<endl;
    // mergeArr(a,5,b,4);
    // cout<<missingEarr(a,10);
    // cout<<missingEUarr(b,5);
    int c[]={5,6,9,14,16,17,20};
    // cout<<maxE(c,7)<<" ";
    // cout<<minE(c,7);
    // missingES(c,7);
    // missingHash(c,7);
    // int d[]={4,8,6,4,4,4,5,5,5,5};
    // duplicatesE(d,10);
    // duplicatesEH(d,10);
    int e[]={4,7,9,3,6,1,8,3,6};
    sumPair(e,9,10);
    // display(a,5);
}
